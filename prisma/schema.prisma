// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                     Int    @id @default(autoincrement())
  name                   String
  email                  String @unique
  password               String
  role                   Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  buildings Building[]
  tokenBlacklist TokenBlacklist[]

  @@map("users")
}

// Token Blacklist for Logout
model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.Text
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("token_blacklist")
}

// ============================================
// FUZZY ASSESSMENT TABLES
// ============================================

// 1. TABLE: buildings
// Menyimpan data bangunan dan hasil analisis fuzzy
model Building {
  id            Int       @id @default(autoincrement())
  userId        Int?      @map("user_id")
  nameBuilding  String    @map("name_building") @db.VarChar(255)

  // Hasil Fuzzy Analysis
  finalStatus   String    @map("final_status") @db.VarChar(50)
  // Opsi: "Pemeliharaan", "Renovasi", "Pembongkaran"

  fuzzyScore    Float?    @map("fuzzy_score") @db.DoublePrecision
  // Output defuzzification (0.0 - 1.0)

  // Metadata
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  assessments   Assessment[]

  @@map("buildings")
}

// 2. TABLE: assessments
// Junction table antara Building dan Category
model Assessment {
  id          Int       @id @default(autoincrement())
  buildingId  Int       @map("building_id")
  categoryId  Int       @map("category_id")

  // Nilai aggregate category (average dari subcategories)
  categoryValue Float?  @map("category_value") @db.DoublePrecision

  // Metadata
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  building    Building  @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])
  subcategoryAssessments SubcategoryAssessment[]

  @@unique([buildingId, categoryId])
  @@map("assessments")
}

// 3. TABLE: categories
// Master data kategori (Arsitektural, Struktural, dll)
model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique @db.VarChar(100)
  description   String?   @db.Text

  // Order untuk UI display
  displayOrder  Int       @map("display_order") @default(0)

  // Metadata
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  subcategories Subcategory[]
  assessments   Assessment[]

  @@map("categories")
}

// 4. TABLE: subcategories
// Master data subcategory (Atap, Langit-Langit, dll)
model Subcategory {
  id            Int       @id @default(autoincrement())
  categoryId    Int       @map("category_id")
  name          String    @db.VarChar(100)
  description   String?   @db.Text

  // Order untuk UI display
  displayOrder  Int       @map("display_order") @default(0)

  // Metadata
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  items         Item[]
  subcategoryAssessments SubcategoryAssessment[]

  @@unique([categoryId, name])
  @@map("subcategories")
}

// 5. TABLE: subcategory_assessments
// Menyimpan nilai assessment per subcategory dalam building tertentu
model SubcategoryAssessment {
  id            Int       @id @default(autoincrement())
  assessmentId  Int       @map("assessment_id")
  subcategoryId Int       @map("subcategory_id")

  // Nilai aggregate subcategory (average dari items)
  subcategoryValue Float? @map("subcategory_value") @db.DoublePrecision

  // Metadata
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  assessment    Assessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  itemAssessments ItemAssessment[]

  @@unique([assessmentId, subcategoryId])
  @@map("subcategory_assessments")
}

// 6. TABLE: items
// Master data item komponen (Balok, Rangka, dll)
model Item {
  id            Int       @id @default(autoincrement())
  subcategoryId Int       @map("subcategory_id")
  name          String    @db.VarChar(100)
  description   String?   @db.Text

  // Order untuk UI display
  displayOrder  Int       @map("display_order") @default(0)

  // Metadata
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  itemAssessments ItemAssessment[]

  @@unique([subcategoryId, name])
  @@map("items")
}

// 7. TABLE: item_assessments
// Menyimpan nilai kerusakan per item dalam assessment tertentu
model ItemAssessment {
  id                      Int       @id @default(autoincrement())
  subcategoryAssessmentId Int       @map("subcategory_assessment_id")
  itemId                  Int       @map("item_id")

  // Nilai kerusakan item (persentase 0.0 - 1.0)
  damageValue             Float     @map("damage_value") @db.DoublePrecision

  // Optional: kondisi item dalam text
  condition               String?   @db.VarChar(50)
  // Opsi: "Baik", "Rusak Ringan", "Rusak Sedang", "Rusak Berat"

  // Optional: catatan tambahan
  notes                   String?   @db.Text

  // Metadata
  createdAt               DateTime  @default(now()) @map("created_at")

  // Relations
  subcategoryAssessment   SubcategoryAssessment @relation(fields: [subcategoryAssessmentId], references: [id], onDelete: Cascade)
  item                    Item      @relation(fields: [itemId], references: [id])

  @@unique([subcategoryAssessmentId, itemId])
  @@map("item_assessments")
}
